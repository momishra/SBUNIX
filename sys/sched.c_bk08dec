#include<sys/sched.h>
#include<sys/pmap.h>
#include<sys/defs.h>
#include<sys/kprintf.h>
#include<sys/gdt.h>
#include<sys/elf64.h>
#include<sys/types.h>
#include<sys/isr.h>

uint64_t *old_rsp;
uint64_t *old_rip;
int isFirst=1;

/*
void switch_to_user_mode(struct task_struct* ts){
  kprintf("Inside switch to user mode");
  set_tss_rsp(&(ts->kstack[511]));
  
  __asm__ volatile(
    "cli;"
    "movq %0,%%cr3;"
    "movq $0x23, %%rax;"
    "movq %%rax, %%ds;"
    "movq %%rax, %%es;"
    "movq %%rax, %%fs;"
    "movq %%rax, %%gs;"
    "movq %1, %%rax;"
    "pushq $0x23;"
    "pushq %%rax;"
    "pushfq;"
    "pushq $0x2b;"
    "pushq %2;"
    "movq $0x0, %%rdi;"
    "movq $0x0, %%rsi;"
    "iretq;"
    ::"r"(ts->cr3),"r"(ts->rsp),"r"(ts->rip)    
  );
}
*/

void switch_to_user_mode(struct task_struct* ts){
  kprintf("Inside switch to user mode");
  //set_tss_rsp(&(ts->kstack[510]));
  /*
  __asm__ volatile(
    "movq %rsp, %rcx;"
    "pushq $0x23;"
    "pushq %rcx;"
    "pushfq;"
    "pushq $0x2b;"
    "pushq %rdi;"
    "iretq;"    
  );
  */
  set_tss_rsp(&(ts->kstack[511]));
}


void dummy()
{
  /*curr_task = (struct task_struct *)kmalloc(sizeof(struct task_struct *));
  struct task_struct *head;
  head = curr_task;
  //uint64_t *pml4 = (uint64_t*)page_alloc(0);
  //curr_task->pml4e = pml4;
  curr_task->rip = (uint64_t*)&fun1;
  curr_task->rsp = (uint64_t*)page_alloc(0);
  //curr_task->stack = curr_task->rsp;
  curr_task->ntask = (struct task_struct *)kmalloc(sizeof(struct task_struct *));
  curr_task = curr_task->ntask;
  curr_task->rip = (uint64_t*)&fun2;
  curr_task->rsp = (uint64_t*)page_alloc(0);
  //curr_task->stack = curr_task->rsp;
  curr_task->ntask=head;
  curr_task = curr_task->ntask;
  
  readyQ[1] =(uint64_t )head;
  readyQ[2] =(uint64_t )head->ntask;*/
  //curr_task = (struct task_struct*)readyQ[1];
}
void contextSwitch(){
  //set_tss_rsp(curr_task->rsp);
  struct task_struct *prev = (struct task_struct*)readyQ[0];
  curr_task = (struct task_struct*)readyQ[1];
   __asm__ volatile("movq %%rsp, %0;""movq $1f, %1;":"=r"(prev->rsp),"=r"(prev->rip));
  //curr_task = (struct task_struct*)readyQ[1];

/*__asm__ volatile(
"pushq %rax;"
"pushq %rbx;"
"pushq %rcx;"
"pushq %rdx;"
"pushq %rsi;"
"pushq %rdi;"
"pushq %rbp;"
"pushq %r8;"
"pushq %r9;"
"pushq %r10;"
"pushq %r11;"
"pushq %r12;"
"pushq %r13;"
"pushq %r14;"
"pushq %r15;"
  );
*/

__asm__ volatile("movq %0, %%cr3":: "a"(curr_task->cr3));

 set_tss_rsp(&(curr_task->kstack[511])); 
  __asm__ __volatile__ (
    //"movq $1f,%0;"
    "movq %0, %%rsp;"
    //"movq %1, %%cr3;"
    //"pushq %1;"
    //"iretq;"
    :
   // :"r"(curr_task->rsp), "r"(curr_task->rip), "r"(curr_task->cr3)
     :"r"(curr_task->rsp)
    :"memory"
);
 //kprintf("end switch\n");
}


void init_context_switch(){
  //struct task_struct *prev = (struct task_struct*)readyQ[1];
  //struct task_struct *next = (struct task_struct*)readyQ[1];
  
  /*__asm__ __volatile__ (
    "movq %%rsp, %0;"
    "movq $1f,%1;"
    :"=g"(prev->rsp),"=g"(prev->rip)
    :
    :"memory"
  );
  
  set_tss_rsp(curr_task->rsp);
  */
  
  __asm__ __volatile__ (
    //"movq $1f,%0;"
    "movq %0, %%rsp;"
    "pushq %1;"
    "retq;"
    "1:\t"
    :
    :"r"(curr_task->rsp), "r"(curr_task->rip)
    :"memory"
);
  kprintf("end switch\n");
}

/*
void mo_switch(){
  //set_tss_rsp(&(pcb->kstack[511]));
 __asm__ volatile(
 "movq %2, %%cr3;"
  "movq $0x23, %%rax;"
  "movq %%rax, %%ds;"
  "movq %%rax, %%es;"
  "movq %%rax, %%fs;"
  "movq %%rax, %%gs;"
  "movq %%rsp, %%rax;"
  "pushq $0x23;"
  "pushq %%rax;"
  "pushfq;"
  //popq %rax
  //orq $0x200, %rax
  //pushq %rax
  "pushq $0x2B;"
  //"movq %1, %%rsp;"
  //"pushq %0;"
  "push %%rdi"
  "iretq;"
  //:
  //:"r"(pcb->rip),"r"(pcb->rsp),"r"(pcb->cr3)
  //:"memory"
);
}
*/

void switch2(struct task_struct *prev, struct task_struct *next){
  
    //set_tss_rsp(next->rsp);
    
  __asm__ volatile(
    "movq %%rsp, %0;"
    "movq $1f,%1;"
    :"=g"(prev->rsp),"=g"(prev->rip)
    :
    :"memory"
  );
  
  __asm__ __volatile__ (
    "movq %0, %%rsp;"
    "pushq %1;"
    "retq;"
    "1:\t"
    :
    :"r"(next->rsp), "r"(next->rip)

);  
  
  /*__asm__ __volatile__ (
    "movq $1f,%0;"
    "movq %1, %%rsp;"
    "pushq %2;"
    "retq;"
    :"=g"(prev->rip)
    :"r"(next->rsp), "r"(next->rip)
);*/

  /*
    __asm__ volatile(
      //"movq %%rsp,%1;"
      //"movq $1f,%0;"
      "movq %0, %%rsp;"
      "pushq %1;"
      "retq;"
      "1:\t"
    //  :"=g"(prev->rip)
      :
      :"r"(next->rsp),"r"(next->rip)
    );
    */
  kprintf("Switched to new process\n");
}

/*
void schedule()
{
kprintf("\nSchedule start\n");
struct task_struct *prev = curr_task;
struct task_struct *next = curr_task->ntask;
curr_task = curr_task->ntask;
switch2(prev, next);
kprintf("\nSchedule ended\n");
}
*/

void schedule()
{
	//struct task_struct *prev = (struct task_struct*)readyQ[0];
  curr_task = (struct task_struct*)readyQ[1];
  // __asm__ volatile("movq %%rsp, %0;""movq $1f, %1;":"=r"(prev->rsp),"=r"(prev->rip));
  //curr_task = (struct task_struct*)readyQ[1];

  __asm__ __volatile__ (
    //"movq $1f,%0;"
    "movq %0, %%rsp;"
    "movq %1, %%cr3;"
    //"pushq %1;"
    //"retq;"
      :
   // :"r"(curr_task->rsp), "r"(curr_task->rip), "r"(curr_task->cr3)
     :"r"(curr_task->rsp), "r"(curr_task->cr3)
    :"memory"
);
 set_tss_rsp(&(curr_task->kstack[511])); 
 kprintf("end switch\n");
}

/*
void fun1()
{
kprintf("hello1");
kprintf("hello2");
kprintf("hello3");
kprintf("hello4");
kprintf("hello5");
kprintf("hello6");
kprintf("hello7");
//schedule();
kprintf("\nEnd of fun1()\n");
switch2User();
//while(1);
}*/

void fun2()
{
//kprintf("--world--");
//schedule();
//kprintf("\nEnd of fun2()\n");
/*struct task_struct *next = (struct task_struct *)readyQ[0];

  __asm__ volatile(
  "movq %0, %%rsp;"
  "movq %2, %%cr3;"
  "pushq %1;"
  "retq"
  "1:\t"
  :"=r"(next->rsp),"=r"(next->rip),"=r"(next->cr3)
  :
  :"memory"
  );
  */
}

/*
void switch2User(struct task_struct *curr_task){
  set_tss_rsp(curr_task->kstack);
  //pml4e_t pml4e = curr_task->pml4e & ~0xFFF;
  
  __asm__ volatile(
   "cli;"
   //"movq %0, %%cr3;"
   "mov $0x23, %%ax;"
   "mov %%ax, %%ds;"
   "mov %%ax, %%es;"
   "mov %%ax, %%fs;"
   "mov %%ax, %%gs;"
   //"movq %0, %%rax;"
   "pushq $0x23;"
   "pushq %%rax;"
   "pushfq;"
   "popq %%rax;"
   "orq $0x200, %%rax;"
   "pushq %%rax;"
   "pushq $0x1B;"
   "pushq $1f;"
   "movq $0x0, %%rdi;"
   "movq $0x0, %%rsi;"
   //"iretq;"
   "1:"
   ::
  // ::"r"(curr_task->rsp), "r"(curr_task->rip)
  );
  
  kprintf("User mode on\n");
}*/

struct task_struct *loadpcb(char *filename){
  struct task_struct *process = (struct task_struct *)kmalloc(sizeof(struct task_struct));
  
  struct Page *p = page_alloc(0);
  uint64_t *pml4 = (uint64_t*)get_kva(p);
  memset(pml4,0,PGSIZE);
  pml4[511] = boot_pml4e[511];
  process->pml4e = (uint64_t*)pml4;
  //memcpy(process->pml4e,boot_pml4e, PGSIZE);
  process->cr3 = PADDR(pml4);
  process->pid = ++nextpid;
  process->state = RUNNING;
  //process->pml4e[510] = process->cr3 | PTE_P | PTE_R;
  
  process->mm = (struct mm_struct*)((char*)(process+1));
  process->mm->mm_count = 0;
  process->mm->mmap = NULL;
  
  process->stack = userMalloc((uint64_t *)process->pml4e,512);
  //process->stack = (uint64_t*)kmalloc(1);
  __asm__ volatile("movq %0, %%cr3;"::"r"(process->cr3));
  kprintf("process->cr3\n=%p",process->cr3);
  /*elf_file_load(process,filename);
  kprintf("process rip is %p", process->rip);
  process->kstack[511] = 0x23;
  process->kstack[510] = (uint64_t)(&process->stack[511]); //check this
  process->kstack[509] = 0x246;
  process->kstack[508] = 0x2b;
  process->kstack[507] = (uint64_t)process->rip;
  int pos = 506;
  for(;pos>491;pos--) process->kstack[pos] = 0x0;*/
  //process->kstack[491] = (uint64_t)(&test); //to be executed after this stack is loaded
  //process->rsp = &(process->kstack[491]); //something with this
  int pos=506;
  int f=1;
  for(;pos>490;pos--) process->kstack[pos] = f++;
  
  process->kstack[491] = (uint64_t)(&switch_process+28);
  process->rsp = &(process->kstack[490]); //something with this
  //process->rsp = &(process->kstack[506]); //something with this
  process->kstack[511] = 0x23;
  //process->kstack[511] = 0x10;
  process->kstack[510] = (uint64_t)(&process->stack[511]);
  //process->kstack[510] = (uint64_t)process->rsp;
  //process->kstack[509] = 0x246;
  process->kstack[509] = 0x20202;
  process->kstack[508] = 0x2b;
  //process->kstack[508] = 0x8;
  elf_file_load(process,filename);
  //kprintf("process rip is %p", process->rip);
  
  //process->kstack[507] = (uint64_t)process->rip; 
  process->kstack[507] = (uint64_t)&fun2;
  //process->rsp = (&process->kstack[506]);
  __asm__ volatile("movq %0, %%cr3;"::"r"(boot_cr3));
 __asm__ volatile("movq %0, %%cr3;"::"r"(boot_cr3));
  
  return process;
} 

struct vm_area_struct *alloc_vma(struct mm_struct *mm){
	struct vm_area_struct *last;
  struct vm_area_struct *temp;
	//char *temp;	

	if(mm->mmap == NULL){ //nothing in vma list
		//temp = (char*)kmalloc(1);
   
    temp = (struct vm_area_struct*)kmalloc(sizeof(struct vm_area_struct));
	  //last = (struct vm_area_struct*)temp;
    last = (struct vm_area_struct*)temp;
		mm->mmap = last;
		mm->mm_count += 1;
		return (struct vm_area_struct *)temp; 
	}else{ 
	//iterate till the last element in vmalist
	last = mm->mmap;
	while(last->vm_next != NULL){
		last = last->vm_next;
	}
	//temp = (char*)last + sizeof(struct vm_area_struct);
	//last->vm_next = (struct vm_area_struct*)temp;
  temp = (struct vm_area_struct*)kmalloc(sizeof(struct vm_area_struct));
  last->vm_next = (struct vm_area_struct*)temp;
	mm->mm_count +=1;
	return (struct vm_area_struct*)temp;
	}
}

void *get_kva(struct Page *p){ //get_kva and page2kva is same
  uint64_t paddr = page2ppn(p) << PGSHIFT;
  uint64_t kaddr = paddr+KERNBASE;
  return (void*)kaddr;
}


struct vm_area_struct *find_vma(struct mm_struct *mm, uint64_t pata){
  struct vm_area_struct *vmlist = (struct vm_area_struct*)mm->mmap;
  struct vm_area_struct *vma=NULL;
  while(vmlist){
    if(vmlist && vmlist->vm_start<=pata && vmlist->vm_end>pata){
      vma = vmlist;
      break;
    }
    vmlist = vmlist->vm_next;
  }
  
  return vma;
}